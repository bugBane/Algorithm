分治算法：分治法是一种很重要的算法。
    字面意思是“分而治之”，就是将一个复杂的问题分为两个或者更多的相同或相似的问题，再把子问题分为更小的问题...直到最后子问题可以简单求解，
    原问题的解即子问题的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅里叶变换...
解决的一些经典问题：
    二分搜索
    大整数乘法
    棋盘覆盖
    合并排序
    快速排序
    线性时间选择
    最接近点对问题
    循环赛日程表
    汉诺塔
基本步骤：
    每一层递归上都有三个步骤：
        1.分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。
        2.解决：将子问题规模较小而容易被解决则直接解，否则递归的解各个问题。
        3.合并：将各个子问题的解合并为原问题的解。

实践：汉诺塔(三个塔a、b、c,从a塔所有数移动到c塔，要求：移动过程中大数不能放在小数上边)
将复杂问题拆分：
    第一种情况：n=1,直接从a放置到c
    第二种情况：n>=2，将数拆成两部分，n-1为一部分,n为一部分
        先将n-1从a移动到b(借助c)
        再将n从a移动到c
        最后将n-1从b移动到c(借助a)
代码：很经典的思路，分治算法的难点在于如何分！！！
    // 分治算法-汉诺塔
    public static void dac(int n, char a, char b, char c) {
        // 第一种情况：n=1，从a移动到c
        if (n == 1) {
            System.out.println("第" + n + "数：" + a + "->" + c);
            // 第二种情况：n>=2，拆分n为n-1部分和n部分
        } else {
            // n-1部分从a借助c移动到b
            dac(n - 1, a, c, b);
            // n从a直接移动到c
            System.out.println("第" + n + "数：" + a + "->" + c);
            // n-1部分从b借助a移动到c
            dac(n - 1, b, a, c);
        }
    }
